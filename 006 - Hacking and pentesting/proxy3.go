package main

import (
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"net/url" // Comment this line to test without proxy.
	"crypto/tls"
	"crypto/x509"
)

func errorCheck(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func main() {
	const PORT = "42443"
	const CERT_FILE = "nrk-root.pem" // it also works with "nrk.pem". It doesn't work without valid certificate.
	const ADDRESS = "https://www.nrk.no/vestland/skalabu-stengt-pa-ubestemt-tid-_-gjekk-ikkje-a-fryse-i-hel-veggedyra-1.15495965?header=off&viewContext=no.nrk.mobil.app&bridgeVersion=1.0.0"
	const PROXY = "http://192.168.1.2:4242" // IP Address and port of Burp Suite proxy
	proxyURL, err := url.Parse(PROXY)	// extracting url from string. Comment this line to test without proxy.
	errorCheck(err) // Comment this line to test without proxy.

	// reading root certificate previously downloaded from website
	certData, err := ioutil.ReadFile(CERT_FILE)
	errorCheck(err)
	cert := x509.NewCertPool()
	cert.AppendCertsFromPEM(certData)

	// Setup for TLS connection using root certificate
	client := &http.Client{
		Transport: &http.Transport{
			Proxy: http.ProxyURL(proxyURL), // Telling to pass by the proxy for the request. Comment this line to test without proxy.
			TLSClientConfig: &tls.Config{
				RootCAs: cert,
			},
		},
	}

	fmt.Println("Getting data from website...")
	// GET request on address found through Burp Suite on NRK Android app
	resp, err := client.Get(ADDRESS) // this generates an error when using the proxy
  errorCheck(err)

	fmt.Println("Data received. Formatting...")
	// reading content of the response
	defer resp.Body.Close()
  body, err := ioutil.ReadAll(resp.Body)
  errorCheck(err)

	fmt.Println("Formatting terminated. Sending data to server...")
	// sending response content to our web server
	handler := func(w http.ResponseWriter, req *http.Request) {
		io.WriteString(w, string(body))
	}
	http.HandleFunc("/", handler)

	fmt.Println("Completed.\nStarting web server at address: localhost:"+PORT)
	log.Fatal(http.ListenAndServe(":"+PORT, nil))
}
